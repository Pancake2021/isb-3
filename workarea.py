# ###1. Генерация ключей гибридной системы
# *Входные параметры:*  
# *1) путь, по которому сериализовать зашифрованный симметричный ключ;*  
# *2) путь, по которому сериализовать открытый ключ;*  
# *3) путь, по которому сериазизовать закрытый ключ.*

# 1.1. Сгеренировать ключ для симметричного алгоритма.  
# 1.2. Сгенерировать ключи для ассиметричного алгоритма.  
# 1.3. Сериализовать ассиметричные ключи.   
# 1.4. Зашифровать ключ симметричного шифрования открытым ключом и сохранить по указанному пути. 

# ###2. Шифрование данных гибридной системой
# *Входные параметры:*  
# *1) путь к шифруемому текстовому файлу (очевидно, что файл должен быть достаточно объемным);*  
# *2) путь к закрытому ключу ассиметричного алгоритма;*  
# *3) путь к зашированному ключу симметричного алгоритма;*  
# *4) путь, по которому сохранить зашифрованный текстовый файл;*  

# 2.1. Расшифровать симметричный ключ.  
# 2.2. Зашифровать текст симметричным алгоритмом и сохранить по указанному пути.   

# ###3. Дешифрование данных гибридной системой
# *Входные парметры:*  
# *1) путь к зашифрованному текстовому файлу;*  
# *2) путь к закрытому ключу ассиметричного алгоритма;*  
# *3) путь к зашированному ключу симметричного алгоритма;*  
# *4) путь, по которому сохранить расшифрованный текстовый файл.*  

# 3.1. Расшифровать симметричный ключ.  
# 3.2. Расшифровать текст симметричным алгоритмом и сохранить по указанному пути. 



#argpass или графисечкий интерфейс 
#декомпозиция кода 
#(аля введите D чтобы дешифровать не подхдит)
# unit test сделать // c гихаюа юнит тест пайт тест теск дискавери (впечатиолиьь работататделатся)
# CA CD github
#на след лабе 4 обьяснят (к концу апреля)
#колизия и хэш
#что за алгоритм шифрования по варианту??? (для чего, где нужен, какой ключ, блочный или поточный,скомпрометрирован или нет насколько он старый)
#все по разному попытаться
#


#import argparse
import os
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.serialization import load_pem_private_key
from cryptography.hazmat.primitives import padding as padding2
import yaml



